 MEMORY {
            ZP:    start = $0   , size = $100;
            RAM:  start = $0200, size = $5E00;
            ROM1:  start = $8000, size = $4000, fill=yes;
            ROM2:  start = $C000, size = $1f80, fill=yes;
            IO:    start = $DF80, size=$80, fill=yes;
            ROM3:  start = $E000, size = $2000, fill=yes;
        }
SEGMENTS {
    ZEROPAGE: load = ZP,  type = zp,  define   = yes;
    DATA:     load = ROM1, type = rw,  define   = yes, run = RAM, start = $0200;
    BSS:      load = RAM, type = bss, define   = yes, start = $1000;
    HEAP:     load = RAM, type = bss, optional = yes, start = $4000;
    STARTUP:  load = ROM1, type = ro;
    ONCE:     load = ROM1, type = ro,  optional = yes;
    CODE:     load = ROM1, type = ro;
    RODATA:   load = ROM1, type = ro;
    VECTORS:  load = ROM3, type = ro,  start    = $FFFA;
}

FEATURES {
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
    STARTADDRESS: default= $8000;
}

SYMBOLS {
    # Define the stack size for the application
    __STACKSIZE__: type = weak, value = $0100;
    __RAM_START__: type = export, value = $0200;
    __RAM_SIZE__: type = export, value = $7E00;
}
